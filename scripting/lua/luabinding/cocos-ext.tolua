class CCScrollView : public CCLayer {
	static CCScrollView* create();
	static CCScrollView* create(CCSize size, CCNode* container);
	bool isClippingToBounds();
	void setContainer(CCNode* pContainer);
	void setContentOffsetInDuration(CCPoint offset, float dt);
	void setZoomScaleInDuration(float s, float dt);
	void addChild(CCNode* child, int zOrder);
	void addChild(CCNode* child, int zOrder, int tag);
	void addChild(CCNode* child);
	bool ccTouchBegan(CCTouch* pTouch, CCEvent* pEvent);
	CCNode* getContainer();
	void ccTouchEnded(CCTouch* pTouch, CCEvent* pEvent);
	CCScrollViewDirection getDirection();
	void setMinScale(float s);
	float getZoomScale();
	int getScriptHandler(int nScriptEventType);
	void updateInset();
	bool initWithViewSize(CCSize size, CCNode* container);
	void pause(CCObject* sender);
	void setDirection(CCScrollViewDirection eDirection);
	void registerScriptHandler(int nFunID, int nScriptEventType);
	void visit();
	void setBounceable(bool bBounceable);
	void setContentOffset(CCPoint offset, bool animated);
	~CCScrollView();
	bool isDragging();
	bool init();
	bool isBounceable();
	const CCSize& getContentSize();
	void ccTouchMoved(CCTouch* pTouch, CCEvent* pEvent);
	void setTouchEnabled(bool e);
	CCPoint getContentOffset();
	void resume(CCObject* sender);
	void setClippingToBounds(bool bClippingToBounds);
	void setViewSize(CCSize size);
	CCSize getViewSize();
	CCPoint maxContainerOffset();
	void setDelegate(CCScrollViewDelegate* pDelegate);
	void setContentSize(const CCSize& size);
	void setMaxScale(float s);
	bool isTouchMoved();
	CCScrollViewDelegate* getDelegate();
	void unregisterScriptHandler(int nScriptEventType);
	bool isNodeVisible(CCNode* node);
	void ccTouchCancelled(CCTouch* pTouch, CCEvent* pEvent);
	CCPoint minContainerOffset();
	CCPoint getTouchPoint();
	CCScrollView();
	void registerWithTouchDispatcher();
	void setZoomScale(float s, bool animated);
	void setZoomScale(float s);
};
class CCColor3bObject : public CCObject {
	ccColor3B value;
	CCColor3bObject(ccColor3B s_value);
};
class CCInvocation : public CCObject {
	void invoke(CCObject* sender);
	unsigned int getControlEvent();
	CCObject* getTarget();
	CCInvocation(CCObject* target, SEL_CCControlHandler action, unsigned int controlEvent);
};
class CCControlSwitchSprite {
};
class CCControlSaturationBrightnessPicker : public CCControl {
	static CCControlSaturationBrightnessPicker* create(CCNode* target, CCPoint pos);
	CCSprite* getShadow();
	bool initWithTargetAndPos(CCNode* target, CCPoint pos);
	CCPoint getStartPos();
	CCSprite* getOverlay();
	void setEnabled(bool enabled);
	CCSprite* getSlider();
	void updateWithHSV(HSV hsv);
	~CCControlSaturationBrightnessPicker();
	CCSprite* getBackground();
	CCControlSaturationBrightnessPicker();
	void updateDraggerWithHSV(HSV hsv);
	float getSaturation();
	float getBrightness();
};
class CCEditBoxImplAndroid : public CCEditBoxImpl {
	void setAnchorPoint(const CCPoint& anchorPoint);
	void onEnter();
	void doAnimationWhenKeyboardMove(float duration, float distance);
	bool isEditing();
	const char* getText();
	void setPosition(const CCPoint& pos);
	void openKeyboard();
	void visit();
	void closeKeyboard();
	~CCEditBoxImplAndroid();
	bool initWithSize(const CCSize& size);
	void setPlaceholderFontColor(const ccColor3B& color);
	void setFontColor(const ccColor3B& color);
	void setPlaceholderFont(const char* pFontName, int fontSize);
	void setPlaceHolder(const char* pText);
	void setContentSize(const CCSize& size);
	int getMaxLength();
	void setText(const char* pText);
	void setMaxLength(int maxLength);
	CCEditBoxImplAndroid(CCEditBox* pEditText);
	void setFont(const char* pFontName, int fontSize);
	void setVisible(bool visible);
};
class CCScrollViewDelegate {
	void scrollViewDidScroll(CCScrollView* view);
	void scrollViewDidZoom(CCScrollView* view);
	~CCScrollViewDelegate();
};
class CCControl : public CCLayerRGBA {
	void onEnter();
	void sendActionsForControlEvents(unsigned int controlEvents);
	void setSelected(bool bSelected);
	bool hasVisibleParents();
	void setHighlighted(bool bHighlighted);
	bool isHighlighted();
	void removeHandleOfControlEvent(unsigned int controlEvent);
	bool isOpacityModifyRGB();
	bool isEnabled();
	void setOpacityModifyRGB(bool bOpacityModifyRGB);
	~CCControl();
	bool isSelected();
	bool init();
	void setEnabled(bool bEnabled);
	unsigned int getState();
	void needsLayout();
	void addHandleOfControlEvent(int nFunID, unsigned int controlEvent);
	CCPoint getTouchLocation(CCTouch* touch);
	void onExit();
	bool isTouchInside(CCTouch* touch);
	CCControl();
	void registerWithTouchDispatcher();
};
class CCTableViewCell : public CCNode, public CCSortableObject {
	void reset();
	void setIdx(unsigned int uIdx);
	void setObjectID(unsigned int uIdx);
	void setName(const string& var);
	unsigned int getObjectID();
	const string& getName();
	CCTableViewCell();
	unsigned int getIdx();
};
class CCSortableObject {
	unsigned int getObjectID();
	void setObjectID(unsigned int objectID);
	~CCSortableObject();
};
class CCControlUtils {
	static RGBA RGBfromHSV(HSV value);
	static CCRect CCRectUnion(const CCRect& src1, const CCRect& src2);
	static CCSprite* addSpriteToTargetWithPosAndAnchor(const char* spriteName, CCNode* target, CCPoint pos, CCPoint anchor);
	static HSV HSVfromRGB(RGBA value);
};
class CCControlStepper : public CCControl {
	double m_dValue;
	bool m_bContinuous;
	bool m_bAutorepeat;
	bool m_bWraps;
	double m_dMinimumValue;
	double m_dMaximumValue;
	double m_dStepValue;
	bool m_bTouchInsideFlag;
	CCControlStepperPart m_eTouchedPart;
	int m_nAutorepeatCount;
	static CCControlStepper* create(CCSprite* minusSprite, CCSprite* plusSprite);
	void setMinusSprite(CCSprite* var);
	bool ccTouchBegan(CCTouch* pTouch, CCEvent* pEvent);
	CCLabelTTF* getMinusLabel();
	void setWraps(bool wraps);
	void ccTouchEnded(CCTouch* pTouch, CCEvent* pEvent);
	bool isContinuous();
	CCSprite* getMinusSprite();
	void updateLayoutUsingTouchLocation(CCPoint location);
	void setValueWithSendingEvent(double value, bool send);
	~CCControlStepper();
	CCLabelTTF* getPlusLabel();
	void stopAutorepeat();
	void ccTouchMoved(CCTouch* pTouch, CCEvent* pEvent);
	void setMaximumValue(double maximumValue);
	void setPlusSprite(CCSprite* var);
	void setMinusLabel(CCLabelTTF* var);
	void setValue(double value);
	void setStepValue(double stepValue);
	CCSprite* getPlusSprite();
	void update(float dt);
	void setMinimumValue(double minimumValue);
	void startAutorepeat();
	bool initWithMinusSpriteAndPlusSprite(CCSprite* minusSprite, CCSprite* plusSprite);
	double getValue();
	void setPlusLabel(CCLabelTTF* var);
	CCControlStepper();
};
class CCTableViewDelegate : public CCScrollViewDelegate {
	void tableCellTouched(CCTableView* table, CCTableViewCell* cell);
	void tableCellWillRecycle(CCTableView* table, CCTableViewCell* cell);
	void tableCellHighlight(CCTableView* table, CCTableViewCell* cell);
	void tableCellUnhighlight(CCTableView* table, CCTableViewCell* cell);
};
class CCControlSlider : public CCControl {
	static CCControlSlider* create(CCSprite* bg, CCSprite* thumb, CCSprite* progress);
	bool ccTouchBegan(CCTouch* touch, CCEvent* pEvent);
	void ccTouchEnded(CCTouch* pTouch, CCEvent* pEvent);
	void markDiscreteMode();
	float getMaximumAllowedValue();
	float getMinimumAllowedValue();
	float getMinimumValue();
	void setThumbSprite(CCSprite* var);
	~CCControlSlider();
	void setMinimumValue(float var);
	void setMinimumAllowedValue(float var);
	void setProgressSprite(CCSprite* var);
	void clearDiscreteMode();
	void setValue(float var);
	void setMaximumValue(float var);
	void needsLayout();
	void ccTouchMoved(CCTouch* pTouch, CCEvent* pEvent);
	void setDiscreteMode(bool var);
	CCSprite* getBackgroundSprite();
	int getIntValue();
	float getMaximumValue();
	float getValue();
	void ccTouchCancelled(CCTouch* pTouch, CCEvent* pEvent);
	CCSprite* getThumbSprite();
	bool isDiscreteMode();
	CCSprite* getProgressSprite();
	void setBackgroundSprite(CCSprite* var);
	void setMaximumAllowedValue(float var);
};
class CCControlPotentiometer : public CCControl {
	float m_fValue;
	float m_fMinimumValue;
	float m_fMaximumValue;
	static CCControlPotentiometer* create(const char* backgroundFile, const char* progressFile, const char* thumbFile);
	void setPreviousLocation(CCPoint var);
	void setProgressTimer(CCProgressTimer* var);
	void potentiometerMoved(CCPoint location);
	void ccTouchEnded(CCTouch* pTouch, CCEvent* pEvent);
	float getMinimumValue();
	void setThumbSprite(CCSprite* var);
	~CCControlPotentiometer();
	bool ccTouchBegan(CCTouch* pTouch, CCEvent* pEvent);
	void ccTouchMoved(CCTouch* pTouch, CCEvent* pEvent);
	CCPoint getPreviousLocation();
	void setEnabled(bool enabled);
	void setValue(float value);
	void setMaximumValue(float maximumValue);
	void setMinimumValue(float minimumValue);
	void potentiometerEnded(CCPoint location);
	float distanceBetweenPointAndPoint(CCPoint point1, CCPoint point2);
	CCProgressTimer* getProgressTimer();
	float getMaximumValue();
	float angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(CCPoint beginLineA, CCPoint endLineA, CCPoint beginLineB, CCPoint endLineB);
	bool isTouchInside(CCTouch* touch);
	float getValue();
	void potentiometerBegan(CCPoint location);
	CCControlPotentiometer();
	CCSprite* getThumbSprite();
	bool initWithTrackSprite_ProgressTimer_ThumbSprite(CCSprite* trackSprite, CCProgressTimer* progressTimer, CCSprite* thumbSprite);
};
class CCTableView : public CCScrollView, public CCScrollViewDelegate {
	static CCTableView* create(CCTableViewDataSource* dataSource, CCSize size, CCNode* container);
	static CCTableView* create(CCTableViewDataSource* dataSource, CCSize size);
	bool ccTouchBegan(CCTouch* pTouch, CCEvent* pEvent);
	void scrollViewDidScroll(CCScrollView* view);
	void setColCount(unsigned int var);
	void ccTouchEnded(CCTouch* pTouch, CCEvent* pEvent);
	CCTableViewDataSource* getDataSource();
	void updateCellAtIndex(unsigned int idx);
	bool initWithViewSize(CCSize size, CCNode* container);
	void removeCellAtIndex(unsigned int idx);
	~CCTableView();
	unsigned int getColCount();
	void ccTouchMoved(CCTouch* pTouch, CCEvent* pEvent);
	void reloadData();
	CCTableViewCell* dequeueCell(const string& name);
	void setDelegate(CCTableViewDelegate* pDelegate);
	void scrollViewDidZoom(CCScrollView* view);
	void insertCellAtIndex(unsigned int idx);
	CCTableViewCell* cellAtIndex(unsigned int idx);
	CCTableViewDelegate* getDelegate();
	int getRealRows();
	void _updateContentSize();
	void unregisterAllScriptHandler();
	void ccTouchCancelled(CCTouch* pTouch, CCEvent* pEvent);
	void setDataSource(CCTableViewDataSource* source);
	CCTableView();
};
class CCEditBoxImpl {
};
class CCTableViewDataSource {
	unsigned int numberOfCellsInTableView(CCTableView* table);
	CCTableViewCell* tableCellAtIndex(CCTableView* table, unsigned int idx);
	CCSize tableCellSizeForIndex(CCTableView* table, unsigned int idx);
	~CCTableViewDataSource();
};
class CCArrayForObjectSorting : public CCArray {
	void setObjectID_ofSortedObject(unsigned int tag, CCSortableObject* object);
	CCArrayForObjectSorting();
	unsigned int indexOfSortedObject(CCSortableObject* obj);
	CCSortableObject* getObjectWithObjectID(unsigned int tag);
	void insertSortedObject(CCSortableObject* object);
	CCSortableObject* objectWithObjectID(unsigned int tag);
	void removeSortedObject(CCSortableObject* object);
};
class CCControlButton : public CCControl {
	bool m_doesAdjustBackgroundImage;
	static CCControlButton* create(string title, const char* fontName, float fontSize);
	static CCControlButton* create(CCNode* label, CCScale9Sprite* backgroundSprite);
	static CCControlButton* create(CCScale9Sprite* sprite);
	static CCControlButton* create();
	void setTitleColorDispatchTable(CCDictionary* var);
	void setZoomOnTouchDown(bool var);
	void setSelected(bool enabled);
	void setTitleLabel(CCNode* var);
	bool ccTouchBegan(CCTouch* pTouch, CCEvent* pEvent);
	void setTitleTTFSizeForState(float size, unsigned int state);
	void setAdjustBackgroundImage(bool adjustBackgroundImage);
	void ccTouchEnded(CCTouch* pTouch, CCEvent* pEvent);
	void setHighlighted(bool enabled);
	void setBackgroundSpriteDispatchTable(CCDictionary* var);
	void setTitleLabelForState(CCNode* label, unsigned int state);
	void setTitleForState(CCString* title, unsigned int state);
	CCDictionary* getTitleDispatchTable();
	void setLabelAnchorPoint(CCPoint var);
	void ccTouchCancelled(CCTouch* pTouch, CCEvent* pEvent);
	CCPoint getLabelAnchorPoint();
	bool initWithBackgroundSprite(CCScale9Sprite* sprite);
	float getTitleTTFSizeForState(unsigned int state);
	void setTitleDispatchTable(CCDictionary* var);
	bool isPushed();
	void setOpacity(unsigned char var);
	~CCControlButton();
	bool init();
	void setTitleTTFForState(const char* fntFile, unsigned int state);
	void setPreferredSize(CCSize var);
	int getHorizontalOrigin();
	void ccTouchMoved(CCTouch* pTouch, CCEvent* pEvent);
	unsigned char getOpacity();
	const ccColor3B& getCurrentTitleColor();
	CCDictionary* getTitleColorDispatchTable();
	void setEnabled(bool enabled);
	CCScale9Sprite* getBackgroundSpriteForState(unsigned int state);
	const ccColor3B& getColor();
	void setMargins(int marginH, int marginV);
	void needsLayout();
	bool initWithTitleAndFontNameAndFontSize(string title, const char* fontName, float fontSize);
	void setTitleBMFontForState(const char* fntFile, unsigned int state);
	const char* getTitleTTFForState(unsigned int state);
	CCScale9Sprite* getBackgroundSprite();
	ccColor3B getTitleColorForState(unsigned int state);
	void setTitleColorForState(ccColor3B color, unsigned int state);
	bool doesAdjustBackgroundImage();
	void setBackgroundSpriteFrameForState(CCSpriteFrame* spriteFrame, unsigned int state);
	void setBackgroundSpriteForState(CCScale9Sprite* sprite, unsigned int state);
	void setColor(const ccColor3B& );
	CCDictionary* getTitleLabelDispatchTable();
	bool initWithLabelAndBackgroundSprite(CCNode* label, CCScale9Sprite* backgroundSprite);
	void setTitleLabelDispatchTable(CCDictionary* var);
	CCNode* getTitleLabel();
	CCSize getPreferredSize();
	int getVerticalMargin();
	CCDictionary* getBackgroundSpriteDispatchTable();
	CCNode* getTitleLabelForState(unsigned int state);
	CCControlButton();
	CCString* getCurrentTitle();
	const char* getTitleBMFontForState(unsigned int state);
	void setBackgroundSprite(CCScale9Sprite* var);
	bool getZoomOnTouchDown();
	CCString* getTitleForState(unsigned int state);
};
class CCEditBox : public CCControlButton, public CCIMEDelegate {
	static CCEditBox* create(const CCSize& size, CCScale9Sprite* pNormal9SpriteBg, CCScale9Sprite* pPressed9SpriteBg, CCScale9Sprite* pDisabled9SpriteBg);
	void setAnchorPoint(const CCPoint& anchorPoint);
	void onEnter();
	void keyboardDidShow(CCIMEKeyboardNotificationInfo& info);
	int getScriptEditBoxHandler();
	const char* getText();
	void keyboardDidHide(CCIMEKeyboardNotificationInfo& info);
	void setPlaceholderFontName(const char* pFontName);
	const char* getPlaceHolder();
	void setFontName(const char* pFontName);
	void registerScriptEditBoxHandler(int handler);
	void visit();
	void setPlaceholderFontSize(int fontSize);
	~CCEditBox();
	void unregisterScriptEditBoxHandler();
	void keyboardWillShow(CCIMEKeyboardNotificationInfo& info);
	void setPlaceholderFontColor(const ccColor3B& color);
	void setFontColor(const ccColor3B& color);
	void keyboardWillHide(CCIMEKeyboardNotificationInfo& info);
	void touchDownAction(CCObject* sender, unsigned int controlEvent);
	void setPlaceholderFont(const char* pFontName, int fontSize);
	void setDelegate(CCEditBoxDelegate* pDelegate);
	void setFontSize(int fontSize);
	bool initWithSizeAndBackgroundSprite(const CCSize& size, CCScale9Sprite* pNormal9SpriteBg);
	void setPlaceHolder(const char* pText);
	void setPosition(const CCPoint& pos);
	CCEditBoxDelegate* getDelegate();
	int getMaxLength();
	void setText(const char* pText);
	void onExit();
	void setMaxLength(int maxLength);
	void setContentSize(const CCSize& size);
	CCEditBox();
	void setFont(const char* pFontName, int fontSize);
	void setVisible(bool visible);
};
class CCControlSwitch : public CCControl {
	static CCControlSwitch* create(CCSprite* maskSprite, CCSprite* onSprite, CCSprite* offSprite, CCSprite* thumbSprite, CCLabelTTF* onLabel, CCLabelTTF* offLabel);
	static CCControlSwitch* create(CCSprite* maskSprite, CCSprite* onSprite, CCSprite* offSprite, CCSprite* thumbSprite);
	void setEnabled(bool enabled);
	void setOn(bool isOn);
	void setOn(bool isOn, bool animated);
	bool ccTouchBegan(CCTouch* pTouch, CCEvent* pEvent);
	CCControlSwitch();
	bool isOn();
	void ccTouchCancelled(CCTouch* pTouch, CCEvent* pEvent);
	void ccTouchEnded(CCTouch* pTouch, CCEvent* pEvent);
	bool initWithMaskSprite(CCSprite* maskSprite, CCSprite* onSprite, CCSprite* offSprite, CCSprite* thumbSprite, CCLabelTTF* onLabel, CCLabelTTF* offLabel);
	bool initWithMaskSprite(CCSprite* maskSprite, CCSprite* onSprite, CCSprite* offSprite, CCSprite* thumbSprite);
	void ccTouchMoved(CCTouch* pTouch, CCEvent* pEvent);
	bool hasMoved();
	~CCControlSwitch();
	CCPoint locationFromTouch(CCTouch* touch);
};
class CCControlHuePicker : public CCControl {
	static CCControlHuePicker* create(CCNode* target, CCPoint pos);
	void setEnabled(bool enabled);
	bool initWithTargetAndPos(CCNode* target, CCPoint pos);
	void setHue(float val);
	CCPoint getStartPos();
	float getHue();
	CCSprite* getSlider();
	~CCControlHuePicker();
	void setBackground(CCSprite* var);
	void setHuePercentage(float val);
	CCSprite* getBackground();
	CCControlHuePicker();
	float getHuePercentage();
	void setSlider(CCSprite* var);
};
class CCEditBoxDelegate {
	void editBoxReturn(CCEditBox* editBox);
	void editBoxEditingDidEnd(CCEditBox* editBox);
	void editBoxTextChanged(CCEditBox* editBox, const string& text);
	void editBoxEditingDidBegin(CCEditBox* editBox);
	~CCEditBoxDelegate();
};
class CCScale9Sprite : public CCNodeRGBA {
	static CCScale9Sprite* create(const char* file, CCRect rect);
	static CCScale9Sprite* create(const char* file, CCRect rect, CCRect capInsets);
	static CCScale9Sprite* create(CCRect capInsets, const char* file);
	static CCScale9Sprite* create(const char* file);
	static CCScale9Sprite* create();
	static CCScale9Sprite* createWithSpriteFrameName(const char* spriteFrameName);
	static CCScale9Sprite* createWithSpriteFrameName(const char* spriteFrameName, CCRect capInsets);
	static CCScale9Sprite* createWithSpriteFrame(CCSpriteFrame* spriteFrame);
	static CCScale9Sprite* createWithSpriteFrame(CCSpriteFrame* spriteFrame, CCRect capInsets);
	CCRect getCapInsets();
	void setOpacityModifyRGB(bool bValue);
	void setInsetTop(float var);
	bool updateWithBatchNode(CCSpriteBatchNode* batchnode, CCRect rect, bool rotated, CCRect capInsets);
	void setInsetBottom(float var);
	bool isOpacityModifyRGB();
	void visit();
	bool initWithSpriteFrameName(const char* spriteFrameName);
	bool initWithSpriteFrameName(const char* spriteFrameName, CCRect capInsets);
	~CCScale9Sprite();
	void updateDisplayedOpacity(unsigned char parentOpacity);
	bool init();
	void setPreferredSize(CCSize var);
	unsigned char getOpacity();
	void setSpriteFrame(CCSpriteFrame* spriteFrame);
	const ccColor3B& getColor();
	bool initWithBatchNode(CCSpriteBatchNode* batchnode, CCRect rect, CCRect capInsets);
	bool initWithBatchNode(CCSpriteBatchNode* batchnode, CCRect rect, bool rotated, CCRect capInsets);
	float getInsetBottom();
	CCScale9Sprite* resizableSpriteWithCapInsets(CCRect capInsets);
	void setOpacity(unsigned char opacity);
	void setContentSize(const CCSize& size);
	float getInsetRight();
	CCSize getOriginalSize();
	bool initWithFile(const char* file, CCRect rect);
	bool initWithFile(const char* file, CCRect rect, CCRect capInsets);
	bool initWithFile(CCRect capInsets, const char* file);
	bool initWithFile(const char* file);
	void setColor(const ccColor3B& color);
	float getInsetTop();
	void setInsetLeft(float var);
	bool initWithSpriteFrame(CCSpriteFrame* spriteFrame);
	bool initWithSpriteFrame(CCSpriteFrame* spriteFrame, CCRect capInsets);
	CCSize getPreferredSize();
	void setCapInsets(CCRect var);
	CCScale9Sprite();
	float getInsetLeft();
	void updateDisplayedColor(const ccColor3B& parentColor);
	void setInsetRight(float var);
};
class CCControlColourPicker : public CCControl {
	static CCControlColourPicker* create();
	void setEnabled(bool bEnabled);
	CCControlHuePicker* getHuePicker();
	void setColor(const ccColor3B& colorValue);
	void hueSliderValueChanged(CCObject* sender, unsigned int controlEvent);
	CCControlSaturationBrightnessPicker* getcolourPicker();
	~CCControlColourPicker();
	void setBackground(CCSprite* var);
	bool init();
	void setcolourPicker(CCControlSaturationBrightnessPicker* var);
	void colourSliderValueChanged(CCObject* sender, unsigned int controlEvent);
	CCControlColourPicker();
	void setHuePicker(CCControlHuePicker* var);
	CCSprite* getBackground();
};
typedef enum {
	kCCScrollViewDirectionNone,
	kCCScrollViewDirectionHorizontal,
	kCCScrollViewDirectionVertical,
	kCCScrollViewDirectionBoth
} CCScrollViewDirection;
typedef enum {
	kCCControlStepperPartMinus,
	kCCControlStepperPartPlus,
	kCCControlStepperPartNone
} CCControlStepperPart;
typedef struct {
	double h;
	double s;
	double v;
} HSV;
typedef struct {
	double r;
	double g;
	double b;
	double a;
} RGBA;
typedef struct {
	unsigned char r;
	unsigned char g;
	unsigned char b;
} ccColor3B;
typedef struct {
	CCRect begin;
	CCRect end;
	float duration;
} CCIMEKeyboardNotificationInfo;
