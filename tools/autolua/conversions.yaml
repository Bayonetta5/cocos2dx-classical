conversions:
  # some times you want to use a special native type when converting from spidermonkey to native
  # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
  # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
  native_types:
    float: "double"
    short: "int32_t"
    "unsigned char": "uint16_t"
    "char": "int32_t"
    "@std::vector<std::basic_string.*>.>.>": "std::vector<std::string>"
    "@std::vector<int.*>.>": "std::vector<int>"

  ns_map:
    "Json::": ""
    "rapidjson::": ""
    "cocos2d::experimental::ui::": ""
    "cocos2d::experimental::": ""
    "cocos2d::extension::": ""
    "cocos2d::ui::": ""
    "cocos2d::": ""
    "cocostudio::timeline::": ""
    "cocostudio::": ""
    "cocosbuilder::": ""
    "CocosDenshion::": ""

  to_native:
    # lua to native
    int: "ok &= luaval_to_int32(tolua_S, ${arg_idx},(int *)&${out_value}, \"${lua_type}:${func_name}\")"
    "unsigned int": "ok &= luaval_to_uint32(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "unsigned char": "ok &= luaval_to_uint16(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    short: "ok &= luaval_to_int32(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "unsigned short": "ok &= luaval_to_ushort(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    char: "ok &= luaval_to_int32(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    bool: "ok &= luaval_to_boolean(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    float: "ok &= luaval_to_number(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    double: "ok &= luaval_to_number(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    long: "ok &= luaval_to_long(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    ssize_t: "ok &= luaval_to_ssize(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "unsigned long": "ok &= luaval_to_ulong(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "long long": "ok &= luaval_to_long_long(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "std::string": "ok &= luaval_to_std_string(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "CCString*": "std::string ${out_value}_tmp; ok &= luaval_to_std_string(tolua_S, ${arg_idx}, &${out_value}_tmp, \"${lua_type}:${func_name}\"); ${out_value} = cocos2d::CCString::create(${out_value}_tmp)"
    "char*": "std::string ${out_value}_tmp; ok &= luaval_to_std_string(tolua_S, ${arg_idx}, &${out_value}_tmp, \"${lua_type}:${func_name}\"); ${out_value} = (char*)${out_value}_tmp.c_str()"
    "CCPoint": "ok &= luaval_to_point(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "CCRect": "ok &= luaval_to_rect(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "CCSize": "ok &= luaval_to_size(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccColor4B": "ok &=luaval_to_color4b(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccColor4F": "ok &=luaval_to_color4f(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccColor3B": "ok &= luaval_to_color3b(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccColorHSV": "ok &= luaval_to_colorhsv(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccPosition": "ok &= luaval_to_position(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccPoint": "ok &= luaval_to_cpoint(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccSize": "ok &= luaval_to_csize(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccRect": "ok &= luaval_to_crect(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccInsets": "ok &= luaval_to_insets(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccBlendFunc": "ok &= luaval_to_blendfunc(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccVertex2F": "ok &= luaval_to_vertex2f(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccVertex3F": "ok &= luaval_to_vertex3f(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccBezierConfig": "ok &= luaval_to_bezierconfig(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccQuad3": "ok &= luaval_to_quad3(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccAABB": "ok &= luaval_to_aabb(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccScriptFunction": "ok &= luaval_to_luafunc(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccPacketHeader": "ok &= luaval_to_packetheader(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccTex2F": "ok &= luaval_to_tex2f(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccV2F_C4B_T2F": "ok &= luaval_to_v2fc4bt2f(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccV2F_C4B_T2F_Quad": "ok &= luaval_to_v2fc4bt2fquad(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccV3F_C4B_T2F": "ok &= luaval_to_v3fc4bt2f(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccV3F_C4B_T2F_Quad": "ok &= luaval_to_v3fc4bt2fquad(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccCustomUniformValue": "ok &= luaval_to_customuniformvalue(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "CCArray*": "ok &= luaval_to_array(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "CCArray&": "ok &= luaval_to_arrayref(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "CCDictionary*": "ok &= luaval_to_dictionary(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "CCDictionary&": "ok &= luaval_to_dictionaryref(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "CCAffineTransform": "ok &= luaval_to_affinetransform(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "ccFontDefinition":  "ok &= luaval_to_fontdefinition(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "@vector<std::basic_string.*>": "ok &= luaval_to_std_vector_string(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "@vector<int.*>": "ok &= luaval_to_std_vector_int(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "@vector<float.*>": "ok &= luaval_to_std_vector_float(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "@vector<unsigned short.*>": "ok &= luaval_to_std_vector_ushort(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    "@vector<cocos2d::CCRect.*>": "ok &= luaval_to_std_vector_rect(tolua_S, ${arg_idx}, &${out_value}, \"${lua_type}:${func_name}\")"
    object: "ok &= luaval_to_object<${arg.decl_in_tpl($generator).replace(\"*\", \"\")}>(tolua_S, ${arg_idx}, \"${arg_lua_type}\", &${out_value})"

  from_native:
    # native to lua
    int: "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    "unsigned int": "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    "unsigned short": "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    "unsigned char": "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    short: "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    char: "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    "long long": "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    "std::string": "tolua_pushcppstring(tolua_S,${in_value})"
    "char*": "tolua_pushstring(tolua_S, (const char*)${in_value})"
    "CCString*": "tolua_pushstring(tolua_S, ${in_value}->getCString())"
    bool: "tolua_pushboolean(tolua_S, (bool)${in_value})"
    float: "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    double: "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    long: "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    ssize_t: "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    "unsigned long": "tolua_pushnumber(tolua_S, (lua_Number)${in_value})"
    "CCPoint": "point_to_luaval(tolua_S, ${in_value})"
    "CCRect": "rect_to_luaval(tolua_S, ${in_value})"
    "CCSize": "size_to_luaval(tolua_S, ${in_value})"
    "ccColor4B": "color4b_to_luaval(tolua_S, ${in_value})"
    "ccColor4F": "color4f_to_luaval(tolua_S, ${in_value})"
    "ccColor3B": "color3b_to_luaval(tolua_S, ${in_value})"
    "ccColorHSV": "colorhsv_to_luaval(tolua_S, ${in_value})"
    "ccPosition": "position_to_luaval(tolua_S, ${in_value})"
    "ccPoint": "cpoint_to_luaval(tolua_S, ${in_value})"
    "ccSize": "csize_to_luaval(tolua_S, ${in_value})"
    "ccRect": "crect_to_luaval(tolua_S, ${in_value})"
    "ccInsets": "insets_to_luaval(tolua_S, ${in_value})"
    "ccVertex2F": "vertex2f_to_luaval(tolua_S, ${in_value})"
    "ccVertex3F": "vertex3f_to_luaval(tolua_S, ${in_value})"
    "ccBezierConfig": "bezierconfig_to_luaval(tolua_S, ${in_value})"
    "ccQuad3": "quad3_to_luaval(tolua_S, ${in_value})"
    "ccAABB": "aabb_to_luaval(tolua_S, ${in_value})"
    "ccPacketHeader": "packetheader_to_luaval(tolua_S, ${in_value})"
    "ccTex2F": "tex2f_to_luaval(tolua_S, ${in_value})"
    "ccV2F_C4B_T2F": "v2fc4bt2f_to_luaval(tolua_S, ${in_value})"
    "ccV2F_C4B_T2F_Quad": "v2fc4bt2fquad_to_luaval(tolua_S, ${in_value})"
    "ccV3F_C4B_T2F": "v3fc4bt2f_to_luaval(tolua_S, ${in_value})"
    "ccV3F_C4B_T2F_Quad": "v3fc4bt2fquad_to_luaval(tolua_S, ${in_value})"
    "ccCustomUniformValue": "customuniformvalue_to_luaval(tolua_S, ${in_value})"
    "CCArray*": "array_to_luaval(tolua_S,${in_value})"
    "CCDictionary*": "dictionary_to_luaval(tolua_S, ${in_value})"
    "CCAffineTransform": "affinetransform_to_luaval(tolua_S, ${in_value})"
    "ccFontDefinition": "fontdefinition_to_luaval(tolua_S, ${in_value})"
    "@vector<std::basic_string.*>": "ccvector_std_string_to_luaval(tolua_S, ${in_value})"
    "@vector<int.*>": "ccvector_int_to_luaval(tolua_S, ${in_value})"
    "@vector<cocos2d::CCRect.*>": "ccvector_rect_to_luaval(tolua_S, ${in_value})"
    "ccBlendFunc": "blendfunc_to_luaval(tolua_S, ${in_value})"
    "@vector<float.*>": "ccvector_float_to_luaval(tolua_S, ${in_value})"
    "@vector<unsigned short.*>": "ccvector_ushort_to_luaval(tolua_S, ${in_value})"
    object: "object_to_luaval<${ntype.replace(\"*\", \"\").replace(\"const \", \"\")}>(tolua_S, \"${arg_lua_type}\", (${ntype.replace(\"const \", \"\")})${in_value})"

