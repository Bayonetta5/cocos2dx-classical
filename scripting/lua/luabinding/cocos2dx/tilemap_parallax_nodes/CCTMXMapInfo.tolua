/****************************************************************************
Author: Luma (stubma@gmail.com)

https://github.com/stubma/cocos2dx-better

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/

/// orientation of map
typedef enum {
    kCCTMXOrientationOrthogonal = 1,
    kCCTMXOrientationIsometric,
    kCCTMXOrientationHexagonal
} cbTMXOrientation;

/// tile flags, it is not TMX standard, just give you a way to flip tile
typedef enum {
    kCCTMXTileFlagFlipH = 0x80000000,
    kCCTMXTileFlagFlipV = 0x40000000,
    kCCTMXTileFlagFlipDiagonal = 0x20000000,
    kCCTMXTileFlagFlipAll = (kCCTMXTileFlagFlipH | kCCTMXTileFlagFlipV | kCCTMXTileFlagFlipDiagonal),
    kCCTMXTileFlagFlipMask = ~(kCCTMXTileFlagFlipAll)
} cbTileFlags;

/**
* Info of a map
*
* \note
* This is a re-implementation for TMX map. Cocos2d-x TMX support is defective, so I write my own.
* To avoid name conflict, I use CB prefix which stands for cocos2dx-better
*/
class CCTMXMapInfo : public CCObject {
    virtual ~CCTMXMapInfo();
    static CCTMXMapInfo* create();

    /**
    * Get a property value by a key
    *
    * @param key key string
    * @return value string, or empty string if not found
    */
    string getProperty(const string& key);

    /**
    * Add a property
    *
    * @param key key string
    * @param value value string
    */
    void addProperty(const string& key, const string& value);

    /// find tileset index by a gid
    int getTileSetIndex(int gid);

    /// get tile property, return empty string if no property found
    string getTileProperty(int gid, const string& key);

    /// add tile property
    void addTileProperty(int gid, const string& key, const string& value);

    /// get tile properties
    CCDictionary* getTileProperties(int gid);

    /// tmx filename
    tolua_property string m_filename;

    /// map orientation
    tolua_property cbTMXOrientation m_orientation;

    /// map width in tiles
    tolua_property int m_mapWidth;

    /// map height in tiles
    tolua_property int m_mapHeight;

    /// tiles width in pixels
    tolua_property float m_tileWidth;

    /// tiles height in pixels
    tolua_property float m_tileHeight;

    /// layer info list
    CCArray& getLayers();
    void setLayers(const CCArray& layers);

    /// tileset info list
    CCArray& getTilesets();
    void setTilesets(const CCArray& tilesets);

    /// ObjectGroup list
    CCArray& getObjectGroups();
    void setObjectGroups(const CCArray& objectGroups);

    /// property dict
    CCDictionary& getProperties();
    void setProperties(const CCDictionary& properties);

    /// tile property dict, key is gid, value is a dict
    CCDictionary& getTileProperties();
    void setTileProperties(const CCDictionary& tileProperties);
};
