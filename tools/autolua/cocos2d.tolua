class SimpleNativeClass : public CCNode {
	CCNode* m_owner;
	int m_someOtherField;
	static SimpleNativeClass* create();
	static void func(int a);
	static void func();
	void setSomeField(const CCNode& n, CCNode* pn);
	void setSomeField(const int& f);
	int processSomeStruct4(someStruct4* s);
	void setSomeOtherField(int f);
	int processSomeStruct2(someStruct2 s);
	int processSomeStruct3(someStruct3 s);
	int processSomeStruct1(someStruct1 s);
	void setAnotherMoreComplexField(const char* str);
	~SimpleNativeClass();
	bool init();
	int processSomeEnum2(someEnum2 e);
	int processSomeEnum3(someEnum3 e);
	unsigned int getObjectType();
	const char* getAnotherMoreComplexField();
	int processSEL_CallFunc(int* c);
	long long thisReturnsALongLong();
	const int& getSomeOtherField();
	int processClassEnum(someClassEnum e);
	void setAge(int var);
	int processGLubyte(unsigned char b);
	int getAge();
	SimpleNativeClass(int m);
	SimpleNativeClass();
	SimpleNativeClass(int m1, int m2);
	enum someClassEnum {
		kValue5,
		kValue6
	};
	typedef enum {
		kValue101
	} someEnum3;
	typedef struct {
	} someStruct4;
	struct someStruct3 {
		CCNode* n;
		void test(const int& f);
	};
};
class VelocityTrackerState {
};
typedef enum {
	kValue100
} someEnum2;
typedef struct {
	int i;
	float f;
	double d;
	CCNode* n;
	void test(const int& f);
} someStruct2;
struct someStruct1 {
	CCNode* n;
	void test(const int& f);
};
