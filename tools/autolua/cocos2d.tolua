class SimpleNativeClass : public CCNode {
	CCNode* m_owner;
	int m_someOtherField;
	static SimpleNativeClass* create();
	static void func(int a);
	static void func();
	const char* getAnotherMoreComplexField();
	void setSomeField(const CCNode& n, CCNode* pn);
	void setSomeField(const int& f);
	const int& getSomeOtherField();
	void setSomeOtherField(int f);
	long long thisReturnsALongLong();
	int processSomeStruct4(someStruct4* s);
	int processSomeEnum3(someEnum3 e);
	int processSomeStruct2(someStruct2 s);
	int processSomeStruct3(someStruct3 s);
	void setAge(int var);
	int processSomeStruct1(someStruct1 s);
	bool init();
	int getAge();
	void setAnotherMoreComplexField(const char* str);
	int processSomeEnum2(someEnum2 e);
	SimpleNativeClass(int m);
	SimpleNativeClass();
	SimpleNativeClass(int m1, int m2);
	int processClassEnum(someClassEnum e);
	~SimpleNativeClass();
	uint32_t getObjectType();
	int processGLubyte(GLubyte b);
	enum someClassEnum {
		kValue5,
		kValue6
	};
	typedef enum {
		kValue101
	} someEnum3;
	typedef struct {
		CCLayer* t;
	} someStruct4;
	struct someStruct3 {
		CCNode* n;
		void test(const int& f);
	};
};
class CCLayer : public CCNode, public CCTouchDelegate, public CCAccelerometerDelegate, public CCKeypadDelegate {
	static CCLayer* create();
	void unregisterScriptTouchHandler();
	void onEnter();
	void keyBackClicked();
	void setAccelerometerInterval(double interval);
	void unregisterScriptAccelerateHandler();
	void registerScriptAccelerateHandler(int nHandler);
	int getTouchMode();
	void setAccelerometerEnabled(bool value);
	bool isSwallowTouch();
	bool init();
	~CCLayer();
	bool isTouchEnabled();
	void setTouchEnabled(bool value);
	void unregisterScriptKeypadHandler();
	void setSwallowTouch(bool flag);
	bool isKeypadEnabled();
	void setTouchMode(ccTouchesMode mode);
	bool isAccelerometerEnabled();
	void onExit();
	void registerScriptTouchHandler(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches);
	void setTouchPriority(int priority);
	CCLayer();
	int getTouchPriority();
	void setKeypadEnabled(bool value);
	void registerWithTouchDispatcher();
	void keyMenuClicked();
	void onEnterTransitionDidFinish();
	void registerScriptKeypadHandler(int nHandler);
};
class CCLayerMultiplex : public CCLayer {
	static CCLayerMultiplex* createWithLayer(CCLayer* layer);
	static CCLayerMultiplex* create();
	int getEnabledLayer();
	~CCLayerMultiplex();
	CCLayerMultiplex();
	CCLayer* layerAt(int n);
	void addLayer(CCLayer* layer);
	bool initWithLayers(CCLayer* layer, va_list params);
	void switchTo(unsigned int n);
};
class CCLayerGradient : public CCLayerColor {
	static CCLayerGradient* create(const ccColor4B& start, const ccColor4B& end);
	static CCLayerGradient* create();
	const ccColor3B& getStartColor();
	bool isCompressedInterpolation();
	GLubyte getStartOpacity();
	void setStartOpacity(GLubyte var);
	void setCompressedInterpolation(bool bCompressedInterpolation);
	void setEndOpacity(GLubyte var);
	bool init();
	void setEndColor(const ccColor3B& var);
	bool initWithColor(const ccColor4B& start, const ccColor4B& end);
	const ccColor3B& getEndColor();
	GLubyte getEndOpacity();
	void setStartColor(const ccColor3B& var);
};
class CCLayerRGBA : public CCLayer, public CCRGBAProtocol {
	static CCLayerRGBA* create();
	void updateDisplayedColor(const ccColor3B& parentColor);
	void setColor(const ccColor3B& color);
	bool isCascadeOpacityEnabled();
	const ccColor3B& getColor();
	GLubyte getDisplayedOpacity();
	void setCascadeColorEnabled(bool cascadeColorEnabled);
	void setOpacity(GLubyte opacity);
	~CCLayerRGBA();
	void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);
	void updateDisplayedOpacity(GLubyte parentOpacity);
	bool init();
	CCLayerRGBA();
	void setOpacityModifyRGB(bool bValue);
	GLubyte getOpacity();
	bool isOpacityModifyRGB();
	bool isCascadeColorEnabled();
	const ccColor3B& getDisplayedColor();
};
class CCLayerColor : public CCLayerRGBA, public CCBlendProtocol {
	static CCLayerColor* create(const ccColor4B& color, GLfloat width, GLfloat height);
	static CCLayerColor* create();
	static CCLayerColor* create(const ccColor4B& color);
	void draw();
	ccBlendFunc getBlendFunc();
	void setColor(const ccColor3B& color);
	void setBlendFunc(ccBlendFunc var);
	void changeWidth(GLfloat w);
	void changeWidthAndHeight(GLfloat w, GLfloat h);
	~CCLayerColor();
	bool init();
	bool initWithColor(const ccColor4B& color);
	bool initWithColor(const ccColor4B& color, GLfloat width, GLfloat height);
	CCLayerColor();
	void setOpacity(GLubyte opacity);
	void changeHeight(GLfloat h);
};
typedef enum {
	kValue100
} someEnum2;
typedef enum {
	kCCTouchesAllAtOnce,
	kCCTouchesOneByOne
} ccTouchesMode;
typedef struct {
	int i;
	float f;
	double d;
	CCNode* n;
	void test(const int& f);
} someStruct2;
typedef struct {
	GLubyte r;
	GLubyte g;
	GLubyte b;
	GLubyte a;
} ccColor4B;
typedef struct {
	GLenum src;
	GLenum dst;
} ccBlendFunc;
struct someStruct1 {
	CCNode* n;
	void test(const int& f);
};
typedef struct {
	GLubyte r;
	GLubyte g;
	GLubyte b;
} ccColor3B;
